Para as questões 2 a 5, considere que as variáveis `f`, `g`, `h`, `i` e `j` são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor `A[]` é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores:
	f: R4
	g: R5
	h: R6
	i: R7
	j: R8
	A: R9
Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.

1. Escreva os trechos de código assembly do MSP430 para:
	(a) Somente setar o bit menos significativo de R5.
		BIS.w #01h, R5
	(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo.
		BIS.w #03h, R6
	(c) Somente zerar o terceiro bit menos significativo de R7.
		BIC.w #04h, R7
	(d) Somente zerar o terceiro e o quarto bits menos significativo de R8.
		BIC.w #06, R8
	(e) Somente inverter o bit mais significativo de R9.
		XOR.w #80h, R9
	(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10. 
		XOR.w #C0, R10
		BIS.w #03, R10
2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

```
if(i>j) f = g+h+10;		Main:	CMP R7, R8	; R8 >= R7?
					JGE else
else f = g-h-10;			add.w R5, R4
```					add.w R6, R4 						add.w #0Ah, R4
					JMP End
				else:	add.w R5, R4
					sub.w R6, R4
					sub.w #0Ah, R4
				End:

3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

```
while(save[i]!=k) i++;		while:	mov.w R7, R15
```					rla R15
					add.w R10, R15; R10 = save
					cmp 0(R15), R9; R9 = k
					jeq End
					inc.w R7
					jmp while
				End:


4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:
						
						
```C						clr R7
for(i=0; i<100; i++) A[i] = i*2;	for:	sub #100, R7	
```						jz End	
						mov.w R7, R15
						rla R15
						mov.w R15, R14
						add R9, R15
						mov.w R14, 0(R15)
						inc.w R7
						jmp for
					End:
						

5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

```C
for(i=99; i>=0; i--) A[i] = i*2;
```
						mov.w #99, R7
					for:	cmp #0, R7
						jge end
						mov.w R7, R15
						rla R15
						mov.w R15, R14
						add R9, R15
						mov.w R14, 0(R15)
						dec.w R7
						jmp for
					End:
						

